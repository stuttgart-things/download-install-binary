---
- name: Create temporary download directory (if it does not exist)
  ansible.builtin.file:
    path: "{{ download_dir }}"
    state: directory
    mode: '1777'

- name: Install unzip
  ansible.builtin.include_role:
    name: install-requirements
  vars:
    os_packages:
      - unzip
  when: "'zip' in item.value.source_url"

- name: "Download -- {{ item.value.bin_name }}"
  ansible.builtin.get_url:
    url: "{{ item.value.source_url }}"
    dest: "{{ download_dir }}"
    validate_certs: false
    mode: '1777'
  when: "'zip' not in item.value.source_url and 'tar' not in item.value.source_url"
  tags: download

- name: "Download and unarchive -- {{ item.value.bin_name }}"
  ansible.builtin.unarchive:
    src: "{{ item.value.source_url }}"
    dest: "{{ download_dir }}"
    validate_certs: false
    remote_src: true
  when: "'.zip' in item.value.source_url or '.tar' in item.value.source_url"
  tags: download

- name: "Copy binary -- {{ item.value.bin_name }}"
  ansible.builtin.copy:
    src: "{{ download_dir }}/{{ item.value.bin_to_copy }}"
    dest: "{{ item.value.bin_dir }}"
    mode: 0755
    remote_src: true
    # Forcing to copy the binary
    force: true
  become: true

- name: "Delete downloading dir -- {{ item.value.bin_name }}"
  ansible.builtin.file:
    path: "{{ download_dir }}/{{ item.value.to_remove }}"
    state: absent
