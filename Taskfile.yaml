---
version: 3
vars:
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi

# PRECONDITION TO CHECK IF THE VIRTUAL ENVIRONMENT IS ACTIVATED
venv-precondition: &venv
  - sh: |
      pip -V | grep '.venv' >/dev/null 2>&1
    msg: "The pip version output does not contain .venv, Halting. Run task setup-molecule and/or source .venv/bin/activate"

tasks:
  run-molecule:
    preconditions: *venv
    cmds:
      - molecule test -s default

  setup-molecule:
    preconditions: *venv
    cmds:
      - pip install -U setuptools pip 'molecule'
      - pip install molecule-docker
      - molecule --version

  setup-venv:
    desc: "Setup python virtual environment"
    cmds:
      - rm -rf ./venv
      - python3 -m venv ./venv
      - echo "Don't forget to run\nsource ./venv/bin/activate"

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        echo "ENTER COMMIT MESSAGE"
        read COMMIT_MESSAGE;
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}
      - sleep 20s
      - |
        RUN_ID=$(gh run list | grep {{ .BRANCH }} | head -1 | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) print $i}')
        gh run watch ${RUN_ID} --exit-status

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - |
        if gh pr list | grep -q "{{.BRANCH}}"; then
          echo "⚠️ PR already exists for branch {{.BRANCH}}, closing it..."
          gh pr close {{.BRANCH}}
        else
          echo "✅ No existing PR found for branch {{.BRANCH}}."
        fi
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull